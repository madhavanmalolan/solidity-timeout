// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CallFunction extends ethereum.Event {
  get params(): CallFunction__Params {
    return new CallFunction__Params(this);
  }
}

export class CallFunction__Params {
  _event: CallFunction;

  constructor(event: CallFunction) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockStart(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockEnd(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Timeout extends ethereum.SmartContract {
  static bind(address: Address): Timeout {
    return new Timeout("Timeout", address);
  }

  currentId(): BigInt {
    let result = super.call("currentId", "currentId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentId", "currentId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CallCall extends ethereum.Call {
  get inputs(): CallCall__Inputs {
    return new CallCall__Inputs(this);
  }

  get outputs(): CallCall__Outputs {
    return new CallCall__Outputs(this);
  }
}

export class CallCall__Inputs {
  _call: CallCall;

  constructor(call: CallCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CallCall__Outputs {
  _call: CallCall;

  constructor(call: CallCall) {
    this._call = call;
  }
}

export class EnqueueCall extends ethereum.Call {
  get inputs(): EnqueueCall__Inputs {
    return new EnqueueCall__Inputs(this);
  }

  get outputs(): EnqueueCall__Outputs {
    return new EnqueueCall__Outputs(this);
  }
}

export class EnqueueCall__Inputs {
  _call: EnqueueCall;

  constructor(call: EnqueueCall) {
    this._call = call;
  }

  get contractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signature(): string {
    return this._call.inputValues[1].value.toString();
  }

  get parameters(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get blockStart(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get blockEnd(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class EnqueueCall__Outputs {
  _call: EnqueueCall;

  constructor(call: EnqueueCall) {
    this._call = call;
  }
}

export class TopUpCall extends ethereum.Call {
  get inputs(): TopUpCall__Inputs {
    return new TopUpCall__Inputs(this);
  }

  get outputs(): TopUpCall__Outputs {
    return new TopUpCall__Outputs(this);
  }
}

export class TopUpCall__Inputs {
  _call: TopUpCall;

  constructor(call: TopUpCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TopUpCall__Outputs {
  _call: TopUpCall;

  constructor(call: TopUpCall) {
    this._call = call;
  }
}
